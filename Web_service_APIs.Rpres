Web_service_and_APIs
========================================================
author: Terry Loecke  
date: 3/8/2018
autosize: true
css: ReumanRpresStyle.css

Intro into Web services and APIs
========================================================
Last year I published a paper that took me much longer to write than it would have if I had known more about how data are stored and queried on-line.   
The paper related precipitation to river nitrate concentrations in the upper Mississippi River Basin.  Past precipitation data were stored on the [Applied Climate Information System (ACIS)](http://www.rcc-acis.org).  Predicted precipitation is stored on [National Climate Change Viewer](https://www2.usgs.gov/climate_landuse/clu_rd/nccv/viewer.asp) or so I thought. The riverine nitrate data came from the [USGS National Water Information System](http://waterdata.usgs.gov/nwis).

Intro into Web services and APIs
========================================================
For example, I would use NWIS web query builder to select the parameters, locations, time interval, etc. to request the data.  Next I would wait for the data to be displayed in the browser and then I would copy and paste into a plain text file.  From there I figured out how to parse and coerce the data into a data frame in R that I could manipulate and model.  __This was a lot of waiting each time I wanted to revise the query.__

Intro into Web services and APIs
========================================================
After doing this for a while I realized that the URL of the query looked similar to the parameters I was requesting!

http://nwis.waterdata.usgs.gov/nwis/qwdata?huc2_cd=07&group_key=NONE&sitefile_output_format=html_table&column_name=agency_cd&column_name=site_no&column_name=station_nm&inventory_output=0&rdb_inventory_output=file&TZoutput=0&pm_cd_compare=Greater%20than&radio_parm_cds=parm_cd_list&radio_multiple_parm_cds=00618%2C00631%2C00620%2C00630&qw_attributes=0&format=rdb&qw_sample_wide=wide&rdb_qw_attributes=0&date_format=YYYY-MM-DD&rdb_compression=value&list_of_search_criteria=huc2_cd

Intro into Web services and APIs
========================================================
Base URL:

**http://nwis.waterdata.usgs.gov/nwis/qwdata** 

?huc2_cd=07&group_key=NONE&sitefile_output_format=html_table&column_name=agency_cd&column_name=site_no&column_name=station_nm&inventory_output=0&rdb_inventory_output=file&TZoutput=0&pm_cd_compare=Greater%20than&radio_parm_cds=parm_cd_list&radio_multiple_parm_cds=00618%2C00631%2C00620%2C00630&qw_attributes=0&format=rdb&qw_sample_wide=wide&rdb_qw_attributes=0&date_format=YYYY-MM-DD&rdb_compression=value&list_of_search_criteria=huc2_cd

Intro into Web services and APIs
========================================================
? - indicates a query or data form is next:

http://nwis.waterdata.usgs.gov/nwis/qwdata
**?**huc2_cd=07&group_key=NONE&sitefile_output_format=html_table&column_name=agency_cd&column_name=site_no&column_name=station_nm&inventory_output=0&rdb_inventory_output=file&TZoutput=0&pm_cd_compare=Greater%20than&radio_parm_cds=parm_cd_list&radio_multiple_parm_cds=00618%2C00631%2C00620%2C00630&qw_attributes=0&format=rdb&qw_sample_wide=wide&rdb_qw_attributes=0&date_format=YYYY-MM-DD&rdb_compression=value&list_of_search_criteria=huc2_cd

Intro into Web services and APIs
========================================================
Next are the parameter key=value pairs
location is indicated by **huc2_cd**  
  - this key indicates a watershed at a very course scale - HUC 02  
  - 07 is the HUC for the Upper Mississippi River Basin

http://nwis.waterdata.usgs.gov/nwis/qwdata?
**huc2_cd=07**&group_key=NONE&sitefile_output_format=html_table&column_name=agency_cd&column_name=site_no&column_name=station_nm&inventory_output=0&rdb_inventory_output=file&TZoutput=0&pm_cd_compare=Greater%20than&radio_parm_cds=parm_cd_list&radio_multiple_parm_cds=00618%2C00631%2C00620%2C00630&qw_attributes=0&format=rdb&qw_sample_wide=wide&rdb_qw_attributes=0&date_format=YYYY-MM-DD&rdb_compression=value&list_of_search_criteria=huc2_cd

Intro into Web services and APIs
========================================================
Parameter key value pairs are separated by &


http://nwis.waterdata.usgs.gov/nwis/qwdata?
huc2_cd=07**&**group_key=NONE&sitefile_output_format=html_table&column_name=agency_cd&column_name=site_no&column_name=station_nm&inventory_output=0&rdb_inventory_output=file&TZoutput=0&pm_cd_compare=Greater%20than&radio_parm_cds=parm_cd_list&radio_multiple_parm_cds=00618%2C00631%2C00620%2C00630&qw_attributes=0&format=rdb&qw_sample_wide=wide&rdb_qw_attributes=0&date_format=YYYY-MM-DD&rdb_compression=value&list_of_search_criteria=huc2_cd

Intro into Web services and APIs
========================================================
output file type may be specified


http://nwis.waterdata.usgs.gov/nwis/qwdata?huc2_cd=07&group_key=NONE& **sitefile_output_format=html_table**&column_name=agency_cd&column_name=site_no&column_name=station_nm&inventory_output=0&rdb_inventory_output=file&TZoutput=0&pm_cd_compare=Greater%20than&radio_parm_cds=parm_cd_list&radio_multiple_parm_cds=00618%2C00631%2C00620%2C00630&qw_attributes=0&format=rdb&qw_sample_wide=wide&rdb_qw_attributes=0&date_format=YYYY-MM-DD&rdb_compression=value&list_of_search_criteria=huc2_cd

Intro into Web services and APIs
========================================================
metadata columns


http://nwis.waterdata.usgs.gov/nwis/qwdata?huc2_cd=07&group_key=NONE& sitefile_output_format=html_table& **column_name=agency_cd&column_name=site_no&column_name=station_nm&inventory_output=0&rdb_inventory_output=file&TZoutput=0**&pm_cd_compare=Greater%20than&radio_parm_cds=parm_cd_list&radio_multiple_parm_cds=00618%2C00631%2C00620%2C00630&qw_attributes=0&format=rdb&qw_sample_wide=wide&rdb_qw_attributes=0&date_format=YYYY-MM-DD&rdb_compression=value&list_of_search_criteria=huc2_cd

Intro into Web services and APIs
========================================================
data columns


http://nwis.waterdata.usgs.gov/nwis/qwdata?huc2_cd=07&group_key=NONE& sitefile_output_format=html_table&column_name=agency_cd&column_name=site_no&column_name=station_nm&inventory_output=0&rdb_inventory_output=file&TZoutput=0& **pm_cd_compare=Greater%20than&radio_parm_cds=parm_cd_list&radio_multiple_parm_cds=00618%2C00631%2C00620%2C00630**&qw_attributes=0&format=rdb&qw_sample_wide=wide&rdb_qw_attributes=0&date_format=YYYY-MM-DD&rdb_compression=value&list_of_search_criteria=huc2_cd


Building the API - text string
========================================================
```{r, eval=F}
base.url <- "http://nwis.waterdata.usgs.gov/nwis/qwdata?"
watershed.url <- "huc2_cd=07"
piece1 <- "&group_key=NONE&sitefile_output_format=html_table&column_name=agency_cd&column_name=site_no&column_name=station_nm&inventory_output=0&rdb_inventory_output=file&TZoutput=0&pm_cd_compare=Greater%20than&radio_parm_cds=parm_cd_list&radio_multiple_parm_cds=00618%2C00631%2C00620%2C00630&qw_attributes=0&format=rdb&qw_sample_wide=wide&rdb_qw_attributes=0&date_format=YYYY-MM-DD&rdb_compression=value&list_of_search_criteria=huc2_cd"
build.url <- paste0(base.url, watershed.url,piece1)
resp <- readLines(con=build.url) # readLines is one of several approaches
```

Intro into Web services and APIs
========================================================
This super long URL was built to query the database  
  - API - application programming interface  
  -  + middle person that communicates between your computer and the web server to exchange data.  
  
  ![Three basic types of APIs](http://cdn.ttgtmedia.com/rms/onlineImages/microservices-api_types.jpg)
  
REST API - representational state transfer

Intro to Web service and APIs
============================================================
Not all APIs display in your browser address bar!  
  - E.g., [Applied Climate Information System (ACIS)](http://www.rcc-acis.org)
  - demo  
  - huge dataset we only want a small part
  

  
Intro into Web services and APIs
============================================================
Not all APIs display in your browser address bar!  
  - E.g., [Applied Climate Information System (ACIS)](http://builder.rcc-acis.org/)
  - solution!
  - inspect the Networking tab of the developers view of the browser as a query is made.
  - everyone try it out on their browsers
  - I'll be asking for demos from unique browsers to be shared over Zoom

Intro into Web services and APIs
=========================================================
![Screen shot of ACIS builder](ACIS_builder_shot.PNG)

Network recording - part 1
=========================================================
Headers  
  - General  
  -  + Requested URL - same as base URL (above)  
  
  -  + Requested Method: Post  
  
  -  + Status Code: 200 Ok , anything else is bad news  
  
  - Response Headers  
  
  -  + Content-Type - this is useful for manipulating data in R  
  

Network recording - part 2
=========================================================
  - Request Headers  
  
  -  + what is acceptable syntax  
  
  - Form Data  
  
  -  + several different views, click around to one without spaces - URLish
  
  


Important packages
=========================================================
httr - by Hadley Wickman  
  - part of rvest (we used for web scraping)  
  - GET and POST  
  - not all APIs are free and open  
  -  + you don't want someone else POSTing to your Twitter!
  
jsonlite  
  - fromJSON can interact with REST APIs and convert into R in one step  
  - trouble with larger requests (>80Mb)  

readLines() 
  - useful when data returned from web service are human readable

Basic steps
============================================
determine the Base and query (data form) URL components  
1. use httr::GET() or similar  
2. convert content() of returned object to human readable  
3. wrangle and clean data into workable R object  
4. conduct analyses  

Worked example
==========================================
see R code in chunk below
```{r, eval=FALSE}
library(httr)
acis.url <- 'http://data.rcc-acis.org/MultiStnData?params=%7B%22state%22%3A%22ks%22%2C%22sdate%22%3A%2219990101%22%2C%22edate%22%3A%2220000201%22%2C%22elems%22%3A%22pcpn%22%2C%22meta%22%3A%22ll%22%7D'
# opportunities for modularity?
test <- httr::GET(url=acis.url) # make request
  dat <- httr::content(test, "text","application/json", encoding="UTF-8") # make human readable
  json_data <- jsonlite::fromJSON(dat) # convert JSON to R list
  ifelse(dir.exists("rds"), "dir all ready exists", dir.create("rds")) # setup directory to write data
  newFN <- paste0("rds/",state.abb[i],"_",sdate,".rds")
  saveRDS(json_data, file=newFN) # save to prevent having to request again
  ff <- sapply(json_data$data$data, cbind) # way to convert list into data matrix
  ff[ff=="M"] <- NA # clean up
  trace <- runif(1000,0.0001,.0099) 
  ff[ff=="T"] <- sample(trace,replace = T,size = 1) # sub real possible numbers
  class(ff) <- "numeric" # convert matrix class to numeric
  dates <- seq.Date(from=lubridate::ymd(sdate), to=lubridate::ymd(edate), by = "1 days") # dates in software are hard, learn some of the tools  
  year <- as.factor(lubridate::year(dates))
  
  ff <- data.frame(date=dates,ff)
  names(ff) <- c("date",paste(json_data$data$meta$state[],json_data$data$meta$name[], json_data$data$meta$ll[][], sep="_"))
  ff$year <- as.factor(lubridate::year(ff$date))
  # summarize by year
  fc <- aggregate(by=list(ff$year), x=ff[,2:(ncol(ff)-1)], mean)
  names(fc)[1] <- "year"
  fc$year <- as.numeric(as.character(fc$year))
  annualmean <- cbind(annualmean, fc)
  print(state.abb[i])
  print(Sys.time())
Sys.sleep(2)

```

Try it out!
===================================================
use some on-line data repo and try to determine how to request data  
some sites require access keys or tokens  
  - data.gov requires access key
  
Helpful Resources
====================================================
[rnoaa package](https://github.com/ropensci/rnoaa) has lots of examples of API for important climate and weather datasets

[NEON API Tutorial](http://www.neonscience.org/neon-api-usage)